% \iffalse meta-comment
%
% Copyright (C) 2019--2020, 2022, 2024 by Daniel Bosk <daniel@bosk.se>
% -------------------------------------------------------
% 
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX 
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{didactic.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{didactic}
%<*package>
    [2024/03/17 v1.4 didactic]
%</package>
%<package>\RequirePackage{xparse}
%<package>\RequirePackage{pythontex}
%<package>\RequirePackage{minted}
%<package>\RequirePackage{translator}
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[utf8]{inputenc}
\usepackage[british]{babel}
\usepackage{pythontex}
\setpythontexoutputdir{.}
\setpythontexworkingdir{..}
\usepackage{beamerarticle}
\usepackage{didactic}
\EnableCrossrefs         
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{didactic.dtx}
  \PrintChanges
  %\PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2019/01/29}{Initial version}
% \changes{v1.1}{2019/03/26}{Adds summary environment}
% \changes{v1.2}{2019/10/26}{Adds lightblock, darkblock and coloured blocks}
% \changes{v1.3}{2019/01/29}{Renames to didactic; adds tools for code examples}
%
% \GetFileInfo{didactic.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment}
% 
%
% \title{The \textsf{didactic} package\thanks{This document
%   corresponds to \textsf{didactic}~\fileversion, dated \filedate.}}
% \author{Daniel Bosk\\\texttt{daniel@bosk.se}}
%
% \maketitle
%
% \section{Introduction}
%
% This package introduces some environments that are useful for writing 
% teaching material.
%
% \section{Usage}
%
% \subsection{Beamer blocks}
%
% \DescribeEnv{assumption}
% \DescribeEnv{idea}
% \DescribeEnv{question}
% \DescribeEnv{exercise}
% \DescribeEnv{remark}
% These environments provides wrappers around Beamer's |block| environment.
% The idea is to complement the blocks provided by Beamer, such as |theorem|, 
% |definition| and |example|, with some more useful blocks.
% Each of them provides a block with an appropriate title and optional subtitle 
% and is of a suitable colour.
% For instance, consider the following.
% \input{idea.tex}
% That can be produced by the following code.
% \inputminted[linenos]{latex}{idea.tex}
%
% \DescribeEnv{lightblock}
% \DescribeEnv{darkblock}
% We provide two shades of boxes, light coloured and dark coloured boxes.
% These can be used to create boxes of various colours easily.
% These two environments take two mandatory arguments: the first one is a 
% colour, the second is the title.
%
% In the text (not slides) the blocks are not coloured.
% For instance, consider the following.
% \input{lightblock.tex}
% That can be produced by the following code.
% \inputminted[linenos]{latex}{lightblock.tex}
%
% \DescribeEnv{blackblock}
% \DescribeEnv{whiteblock}
% \DescribeEnv{bwblock}
% For instance, we provide a black block, white block and a black-white block.
% These take only one mandatory argument: a title.
%
% \DescribeEnv{redblock}
% \DescribeEnv{blueblock}
% \DescribeEnv{purpleblock}
% \DescribeEnv{greenblock}
% \DescribeEnv{yellowblock}
% \DescribeEnv{orangeblock}
% We also provide a few predefined blocks in various common colours.
% They all take a title as mandatory argument.
%
% \subsection{Tools for code examples}
%
% We also provide two commands for working with code examples: |lstexample| and 
% |runexample|.
%
% \DescribeMacro{\lstexample}
% The |\lstexample| command allows us to typeset the source code of the 
% example.
% For instance, |\lstexample{hello.py}| produces the following:
% \lstexample{hello.py}
%
% We can also pass optional arguments directly to |minted| that is used to 
% typeset the code.
% \begin{example}
% |\lstexample[linenos,highlightlines=4]{hello.py}| produces the following.
% \lstexample[linenos,highlightlines=4]{hello.py}
% \end{example}
%
% \DescribeMacro{\runexample}
% We can also run the example code and include its output using the 
% |\runexample| macro.
% \begin{example}
% For instance, |\runexample{hello.py}| produces the following.
% \runexample{hello.py}
% \end{example}
%
% \StopEventually{}
%
% \section{Implementation}
%
% We want to provide a set of environments (blocks) for |beamer|.
% We want the names of the blocks to be translated.
% We'll use the |translator| package for this.
%    \begin{macrocode}
\RequirePackage{translator}
\usedictionary{didactic}
%    \end{macrocode}
%
% We also want to have the same environments for the article mode, but in a 
% nicer format that the default of |beamerarticle|.
% For instance, instead of
% \begin{block}{Example}
% This is an example.
% \end{block}
% we want something like
% \begin{example}
% This is an example.
% \end{example}
%
% This means that we'll need to do one thing if |beamer| is loaded and another 
% if |beamerarticle| is loaded---or rather, when |beamer| is not loaded, we 
% should be able to use this without |beamer| and |beamerarticle|.
%    \begin{macrocode}
\makeatletter
\@ifclassloaded{beamer}{% beamer loaded
%    \end{macrocode}
%
% \subsection{More semantic environments}
%
% \begin{environment}{assumption}
% \begin{environment}{idea}
% \begin{environment}{question}
% \begin{environment}{exercise}
% \begin{environment}{remark}
% \begin{environment}{summary}
% These environments wraps Beamer's |block| environment: it sets a default 
% title and colour with an optional name.
%    \begin{macrocode}
\ProvideDocumentEnvironment{assumption}{o}{%
  \begin{block}{\translate{Assumption}\IfValueT{#1}{: #1}}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{protocol}{o}{%
  \begin{block}{\translate{Protocol}\IfValueT{#1}{: #1}}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{remark}{o}{%
  \begin{block}{\translate{Remark}\IfValueT{#1}{: #1}}
}{%
  \end{alertblock}
}
\ProvideDocumentEnvironment{idea}{o}{%
  \begin{block}{Idea\IfValueT{#1}{: #1}}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{question}{o}{%
  \setbeamercolor{block body}{bg=orange!15,fg=black}
  \setbeamercolor{block title}{bg=orange,fg=white}
  \setbeamercolor{local structure}{fg=orange}
  \begin{block}{\translate{Question}\IfValueT{#1}{: #1}}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{exercise}{o}{%
  \setbeamercolor{block body}{bg=yellow!10,fg=black}
  \setbeamercolor{block title}{bg=yellow,fg=black}
  \setbeamercolor{local structure}{fg=yellow}
  \begin{block}{Exercise\IfValueT{#1}{: #1}}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{summary}{o}{%
  \begin{block}{\translate{Summary}\IfValueT{#1}{: #1}}
}{%
  \end{block}
}
%    \end{macrocode}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
%
% And that's the end of the |beamer| part.
%    \begin{macrocode}
}% end beamer loaded
%    \end{macrocode}
% 
% \subsection{Article version of semantic blocks}
%
% Let's turn our focus to the article mode.
% We want the |beamerarticle| package.
%    \begin{macrocode}
{% beamer not loaded
\@ifclassloaded{beamerarticle}{% beamerarticle loaded
  \relax
}{% beamerarticle not loaded
  \RequirePackage{beamerarticle}
}
%    \end{macrocode}
%
% \begin{environment}{assumption}
% \begin{environment}{idea}
% \begin{environment}{question}
% \begin{environment}{exercise}
% \begin{environment}{remark}
% \begin{environment}{summary}
% We want to provide the same environments as for |beamer|, but in a nicer
% format.
% We'll use the |thmtools| package to define the environments.
%    \begin{macrocode}
\RequirePackage{thmtools}
\declaretheorem[
  numbered=unless unique,style=definition,
  name=\translate{Assumption},
  refname={\translate{assumption},\translate{assumptions}},
  Refname={\translate{Assumption},\translate{Assumptions}}
]{assumption}
\declaretheorem[
  numbered=unless unique,style=definition,
  name=\translate{Idea},
  refname={\translate{idea},\translate{ideas}},
  Refname={\translate{Idea},\translate{Ideas}}
]{idea}
\declaretheorem[
  numbered=unless unique,style=remark,
  name=\translate{Question},
  refname={\translate{question},\translate{questions}},
  Refname={\translate{Question},\translate{Questions}}
]{question}
\declaretheorem[
  numbered=unless unique,style=definition,
  name=\translate{Exercise},
  refname={\translate{exercise},\translate{exercises}},
  Refname={\translate{Exercise},\translate{Exercises}}
]{exercise}
\declaretheorem[
  numbered=unless unique,style=remark,
  name=\translate{Remark},
  refname={\translate{remark},\translate{remarks}},
  Refname={\translate{Remark},\translate{Remarks}}
]{remark}
\declaretheorem[
  numbered=unless unique,style=definition,
  name=Sammanfattning,
  refname={\translate{summary},\translate{summaries}},
  Refname={\translate{Summary},\translate{Summaries}}
]{summary}
%    \end{macrocode}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
%
% And that concludes the article part.
% And the end of the |beamer| and non-|beamer| specific parts.
%    \begin{macrocode}
}% end beamer not loaded
\makeatother
%    \end{macrocode}
%
%
% \subsection{Coloured blocks}
%
% \begin{environment}{lightblock}
% \begin{environment}{darkblock}
% \begin{environment}{blackblock}
% \begin{environment}{whiteblock}
% \begin{environment}{bwblock}
% \begin{environment}{redblock}
% \begin{environment}{blueblock}
% \begin{environment}{purpleblock}
% \begin{environment}{greenblock}
% \begin{environment}{yellowblock}
% \begin{environment}{orangeblock}
% Now we have the coloured blocks.
% These we want to define even if |beamer| is not loaded, but for this we need 
% |beamerarticle| instead.
%    \begin{macrocode}
\ProvideDocumentEnvironment{lightblock}{mm}{%
  \setbeamercolor{block body}{bg=#1!10,fg=black}
  \setbeamercolor{block title}{bg=#1,fg=black}
  \setbeamercolor{local structure}{fg=#1}
  \begin{block}{#2}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{darkblock}{mm}{%
  \setbeamercolor{block body}{bg=#1!10,fg=black}
  \setbeamercolor{block title}{bg=#1,fg=white}
  \setbeamercolor{local structure}{fg=#1}
  \begin{block}{#2}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{blackblock}{m}
{\begin{darkblock}{black}{#1}}
{\end{darkblock}}
\ProvideDocumentEnvironment{whiteblock}{m}{%
  \setbeamercolor{block body}{bg=white!10,fg=black}
  \setbeamercolor{block title}{bg=white,fg=black}
  \setbeamercolor{local structure}{fg=black}
  \begin{block}{#1}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{bwblock}{m}{%
  \setbeamercolor{block body}{bg=white!10,fg=black}
  \setbeamercolor{block title}{bg=black,fg=white}
  \setbeamercolor{local structure}{fg=black}
  \begin{block}{#1}
}{%
  \end{block}
}
\ProvideDocumentEnvironment{redblock}{m}
{\begin{darkblock}{red}{#1}}
{\end{darkblock}}
\ProvideDocumentEnvironment{blueblock}{m}
{\begin{darkblock}{blue}{#1}}
{\end{darkblock}}
\ProvideDocumentEnvironment{purpleblock}{m}
{\begin{darkblock}{purple}{#1}}
{\end{darkblock}}
\ProvideDocumentEnvironment{greenblock}{m}
{\begin{lightblock}{green}{#1}}
{\end{lightblock}}
\ProvideDocumentEnvironment{yellowblock}{m}
{\begin{lightblock}{yellow}{#1}}
{\end{lightblock}}
\ProvideDocumentEnvironment{orangeblock}{m}
{\begin{lightblock}{orange}{#1}}
{\end{lightblock}}
%    \end{macrocode}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
% \end{environment}
%
%
% \subsection{Tools for code examples}
%
% Let's turn our focus to |\lstexample| and |\runexample|.
% We want to make it easy to typeset and print the output of example Python 
% programs in slides and texts.
% We want to use PythonTeX to automatically run the code and typeset the source 
% code using |minted|.
%
% These are the same for both |beamer| and article mode.
%
% \begin{macro}{\lstexample}
% The first part is easy.
% To typeset the source file we simply need to use the minted package.
% We provide an optional argument to pass options to minted.
%    \begin{macrocode}
\NewDocumentCommand{\lstexample}{om}{%
  \IfValueTF{#1}{%
    \inputminted[escapeinside=||,#1]{python}{#2}%
  }{%
    \inputminted[escapeinside=||]{python}{#2}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\runexample}
% Now, for the second part, printing the output, we do this in two steps.
% First, we create a function using PythonTeX that runs a Python program and 
% prints it output.
%
% Let's create that function in PythonTeX to run the example program file.
% We simply execute it with Python 3 and capture its output.
% Then we print the output to stdout, which is then captured by PythonTeX.
% We use |pytex.add_dependencies| to add the file as a dependency to rerun the 
% code when necessary.
%    \begin{macrocode}
\begin{pycode}
import subprocess

def run_module(m):
    result = subprocess.run(["python3", m], capture_output=True)
    print(result.stdout.decode("utf8").strip())
    pytex.add_dependencies(m)
\end{pycode}
%    \end{macrocode}
%
% Then we simply create a command that run that function with the file as 
% argument.
% Then print the output in verbatim mode.
%    \begin{macrocode}
\newcommand{\runexample}[1]{%
  \setpythontexautoprint{false}%
  \pyc{run_module('#1')}%
  \printpythontex[verbatim]%
}
%    \end{macrocode}
% \end{macro}
%
% \Finale
\endinput
